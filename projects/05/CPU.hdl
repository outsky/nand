// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 
 FED C BA9876 543 210
 111 a cccccc ddd jjj
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in = instruction[15], out = bA);	// is A instruction?
	Not(in = bA, out = bC);	// is C instruction
	And(a = bC, b = instruction[3], out = writeM);
	And(a = bC, b = instruction[4], out = bDestD);
	And(a = bC, b = instruction[5], out = bDestA);
	Or(a = bA, b = bDestA, out = bLoadA);
    Mux16(a[0..14] = instruction[0..14], b = oM, sel = instruction[15], out = M1);
	ARegister(in = M1, load = bLoadA, out = A, out[0..14] = addressM);
	DRegister(in = oM, load = bDestD, out = D);
	Mux16(a = A, b = inM, sel = instruction[12], out = M2);
	ALU(x = D, y = M2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = oM, zr = bZR, ng = bNG);
	
	DMux8Way(in = true, sel = instruction[0..2], a = nj, b = gt, c = eq, d = ge, e = lt, f = ne, g = le, h = jmp);
	
	/*
	bLoadPC = (!nj && (
		(gt && !bZR && !bNG) ||
		(eq && bZR) ||
		(ge && !bNG) ||
		(lt && bNG) ||
		(ne && !bZR) ||
		(le && (bZR || bNG))
	)) || jmp
	*/
	
	Not(in = bZR, out = bNZR);
	Not(in = bNG, out = bNNG);
	
	And(a = gt, b = bNZR, out = b0);
	And(a = b0, b = bNNG, out = b1);	// (gt && !bZR && !bNG)
	
	And(a = eq, b = bZR, out = b2);		// (eq && bZR)
	
	And(a = ge, b = bNNG, out = b3);	// (ge && !bNG)
	
	And(a = lt, b = bNG, out = b4);		// (lt && bNG)
	
	And(a = ne, b = bNZR, out = b5);	// (ne && !bZR)
	
	Or(a = bZR, b = bNG, out = b6);
	And(a = le, b = b6, out = b7);		// (le && (bZR || bNG)
	
	Or(a = b1, b = b2, out = bb1);
	Or(a = bb1, b = b3, out = bb2);
	Or(a = bb2, b = b4, out = bb3);
	Or(a = bb3, b = b5, out = bb4);
	Or(a = bb4, b = b7, out = bb5);
	
	Not(in = nj, out = nnj);
	
	And(a = nnj, b = bb5, out = bbb1);
	
	Or(a = bbb1, b = jmp, out = bbb2);
	
	And(a = bbb2, b = bC, out = bLoadPC);
	
	PC(in = A, load = bLoadPC, inc = true, reset = reset, out[0..14] = pc);
}